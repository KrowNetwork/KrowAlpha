{
    "docs": [
        {
            "location": "/",
            "text": "IF THE SERVER HAS TURNED OFF BUT EVERYTHING IS INSTALLED, YOU NEED TO RESTART FABRIC BACKEND\n\nRefer to \"starting fabric\" docs",
            "title": "Home"
        },
        {
            "location": "/Installation/",
            "text": "1. Clone files\n\n\ngit clone https://github.com/KrowNetwork/KrowAlpha\n\n\n2. Run install script\n\n\nFrom the folder that git clone made, run:\n\n\nchmod +x install.sh\n\n\n./install.sh\n\n\n3. Start the model\n\n\nFor the first time only, run the following command:\n*\n\n\nchmod +x startFabric.sh\n\n\n./startFabric.sh\n\n\nYou shouldn't have to run that command ever again unless the server turns off",
            "title": "Installation"
        },
        {
            "location": "/Installation/#1-clone-files",
            "text": "git clone https://github.com/KrowNetwork/KrowAlpha",
            "title": "1. Clone files"
        },
        {
            "location": "/Installation/#2-run-install-script",
            "text": "From the folder that git clone made, run:  chmod +x install.sh  ./install.sh",
            "title": "2. Run install script"
        },
        {
            "location": "/Installation/#3-start-the-model",
            "text": "For the first time only, run the following command: *  chmod +x startFabric.sh  ./startFabric.sh  You shouldn't have to run that command ever again unless the server turns off",
            "title": "3. Start the model"
        },
        {
            "location": "/Running/",
            "text": "Starting the server\n\n\nIf you have never ran the rest server before, run the following commands from inside the KrowAlpha folder:\n\n\ncd fabric-tools\n./createPeerAdminCard.sh\ncd ..\ncd krow\ncomposer archive create -t dir -n .\ncomposer runtime install --card PeerAdmin@hlfv1 --businessNetworkName krow\ncomposer network start --card PeerAdmin@hlfv1 --networkAdmin admin --networkAdminEnrollSecret adminpw --archiveFile krow@0.0.1.bna --file networkadmin.card\ncomposer card import --file networkadmin.card\n\n\n\n\nTo start the server, run the auto-update script",
            "title": "Running"
        },
        {
            "location": "/Running/#starting-the-server",
            "text": "If you have never ran the rest server before, run the following commands from inside the KrowAlpha folder:  cd fabric-tools\n./createPeerAdminCard.sh\ncd ..\ncd krow\ncomposer archive create -t dir -n .\ncomposer runtime install --card PeerAdmin@hlfv1 --businessNetworkName krow\ncomposer network start --card PeerAdmin@hlfv1 --networkAdmin admin --networkAdminEnrollSecret adminpw --archiveFile krow@0.0.1.bna --file networkadmin.card\ncomposer card import --file networkadmin.card  To start the server, run the auto-update script",
            "title": "Starting the server"
        },
        {
            "location": "/auto-update script/",
            "text": "If you have never ran the auto update script, navigate to the KrowAlpha folder, and run the following:\n\n\nTo run:\n\n\ncomposer/git-update BRANCH PORT\n\n\nParameters:\n\n1. BRANCH - github branch to use (master, etc)\n\n2. PORT - port to run on (8888, 5555, 3333, etc)",
            "title": "Auto update script"
        },
        {
            "location": "/python/",
            "text": "Instantiate Krow\n\n\nCURRENTLY, PYTHON CODE CAN ONLY BE WRITTEN AND RAN IN THE PYTHON FOLDER\n\nTo instantiate a Krow object, use the following command:\n\n\nimport Krow\n\nkrow = Krow(\"https://18.220.46.51:3000/\")\n\n\n\n\nRun the tests\n\n\nRunning the tests is super easy. \n\n\nfrom Krow import *\nimport test_suite\nimport time\n\nchain = Chain(\"http:18.220.46.51:3000/\")\n# test_suite.delete_samples(chain) # if you need to delete the samples\n# test_suite.create_samples(chain) # only use if you just deleted the samples\nx = test_suite.test_all(chain) # Runs all tests\nfor i in x:\n    print (i)\n# print (test_suite.test_1(chain, \"results/test_1/\", write=False)) # run individual tests. Leave write=False\n# print (test_suite.test_2(chain, \"results/test_2/\", write=True))\n# print (test_suite.test_3(chain, \"results/test_3/\", write=True))\n# print (test_suite.test_4(chain, \"results/test_4/\", write=True))\n# print (test_suite.test_5(chain, \"results/test_5/\", write=True))\n# print (test_suite.test_6(chain, \"results/test_6/\", write=True))\n# print (test_suite.test_7(chain, \"results/test_7/\", write=True))\n# print (test_suite.test_8(chain, \"results/test_8/\", write=False))\n# print (test_suite.test_9(chain, \"results/test_9/\", write=False))\n# print (test_suite.test_10(chain, \"results/test_10/\", write=False))\n# print (test_suite.test_11(chain, \"results/test_11/\", write=False))\n# print (test_suite.test_12(chain, \"results/test_12/\", write=False))\n# print (test_suite.test_13(chain, \"results/test_13/\", write=False))\n\ntime.sleep(5) # optional\n\nfor i in test_suite.get_transaction_history(chain)[-10:]: # optional. Prints last 10 entries from the chain\n    print (i)",
            "title": "Python"
        },
        {
            "location": "/python/#instantiate-krow",
            "text": "CURRENTLY, PYTHON CODE CAN ONLY BE WRITTEN AND RAN IN THE PYTHON FOLDER \nTo instantiate a Krow object, use the following command:  import Krow\n\nkrow = Krow(\"https://18.220.46.51:3000/\")",
            "title": "Instantiate Krow"
        },
        {
            "location": "/python/#run-the-tests",
            "text": "Running the tests is super easy.   from Krow import *\nimport test_suite\nimport time\n\nchain = Chain(\"http://18.220.46.51:3000/\")\n# test_suite.delete_samples(chain) # if you need to delete the samples\n# test_suite.create_samples(chain) # only use if you just deleted the samples\nx = test_suite.test_all(chain) # Runs all tests\nfor i in x:\n    print (i)\n# print (test_suite.test_1(chain, \"results/test_1/\", write=False)) # run individual tests. Leave write=False\n# print (test_suite.test_2(chain, \"results/test_2/\", write=True))\n# print (test_suite.test_3(chain, \"results/test_3/\", write=True))\n# print (test_suite.test_4(chain, \"results/test_4/\", write=True))\n# print (test_suite.test_5(chain, \"results/test_5/\", write=True))\n# print (test_suite.test_6(chain, \"results/test_6/\", write=True))\n# print (test_suite.test_7(chain, \"results/test_7/\", write=True))\n# print (test_suite.test_8(chain, \"results/test_8/\", write=False))\n# print (test_suite.test_9(chain, \"results/test_9/\", write=False))\n# print (test_suite.test_10(chain, \"results/test_10/\", write=False))\n# print (test_suite.test_11(chain, \"results/test_11/\", write=False))\n# print (test_suite.test_12(chain, \"results/test_12/\", write=False))\n# print (test_suite.test_13(chain, \"results/test_13/\", write=False))\n\ntime.sleep(5) # optional\n\nfor i in test_suite.get_transaction_history(chain)[-10:]: # optional. Prints last 10 entries from the chain\n    print (i)",
            "title": "Run the tests"
        },
        {
            "location": "/starting fabric/",
            "text": "Run the following commands to start the fabric backend:\n\n\ncd composer\ndocker-compose start",
            "title": "Starting fabric"
        }
    ]
}