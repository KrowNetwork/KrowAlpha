{
    "docs": [
        {
            "location": "/",
            "text": "Krow Network Internal Documentation",
            "title": "Home"
        },
        {
            "location": "/Installation/",
            "text": "1. Copy the installation and startup scripts\n\n\nscp -r scripts/composer USER@KROWNETWORK:$installdir/composer\n\n\n\n\nIf you don't have permissions to copy the scripts, so you should copy it onto the server, then use su to login and copy it from there\n\n\n2. Run install scripts\n\n\n$installdir/prereqs-ubuntu.sh\n$installdir/install.sh\n\n\n\n\n3. Set up /etc/rc.local and cron using config excerpts\n\n\nscripts/rc.local\n\n\n\n\nand\n\n\nscripts/cronjob",
            "title": "Installation"
        },
        {
            "location": "/Installation/#1-copy-the-installation-and-startup-scripts",
            "text": "scp -r scripts/composer USER@KROWNETWORK:$installdir/composer  If you don't have permissions to copy the scripts, so you should copy it onto the server, then use su to login and copy it from there",
            "title": "1. Copy the installation and startup scripts"
        },
        {
            "location": "/Installation/#2-run-install-scripts",
            "text": "$installdir/prereqs-ubuntu.sh\n$installdir/install.sh",
            "title": "2. Run install scripts"
        },
        {
            "location": "/Installation/#3-set-up-etcrclocal-and-cron-using-config-excerpts",
            "text": "scripts/rc.local  and  scripts/cronjob",
            "title": "3. Set up /etc/rc.local and cron using config excerpts"
        },
        {
            "location": "/Running/",
            "text": "Starting the server\n\n\nThe REST server should start automatically from \n/etc/rc.local\n\nIf it is not running:\n\n\n$installdir/composer/start \"$branch\" \"$port\"\n\n\n\n\nAuto-Update\n\n\nThe server will automatically update the REST server, as per the cron job\n\n\n$installdir/composer/git-update\n\n\n\n\nThis should NOT be used in production\n\n\nViewing Server\n\n\nDetached Screen\n\n\nIf the REST server was started as a detached screen:\n\n\nscreen -r -S composer-rest-server\n\n\n\n\nIf this error occurs \nCannot open your terminal '/dev/pts/x' - please check.\n use this \nonce\n before running screen\n\n\nscript /dev/null\n\n\n\n\nThis workaround is quite hackish.\n\n\nBackground Process\n\n\nIf the REST server was started as a background process:\n\n\nfg composer-rest-server",
            "title": "Running"
        },
        {
            "location": "/Running/#starting-the-server",
            "text": "The REST server should start automatically from  /etc/rc.local \nIf it is not running:  $installdir/composer/start \"$branch\" \"$port\"",
            "title": "Starting the server"
        },
        {
            "location": "/Running/#auto-update",
            "text": "The server will automatically update the REST server, as per the cron job  $installdir/composer/git-update  This should NOT be used in production",
            "title": "Auto-Update"
        },
        {
            "location": "/Running/#viewing-server",
            "text": "",
            "title": "Viewing Server"
        },
        {
            "location": "/Running/#detached-screen",
            "text": "If the REST server was started as a detached screen:  screen -r -S composer-rest-server  If this error occurs  Cannot open your terminal '/dev/pts/x' - please check.  use this  once  before running screen  script /dev/null  This workaround is quite hackish.",
            "title": "Detached Screen"
        },
        {
            "location": "/Running/#background-process",
            "text": "If the REST server was started as a background process:  fg composer-rest-server",
            "title": "Background Process"
        },
        {
            "location": "/auto-update script/",
            "text": "If you have never ran the auto update script, navigate to the KrowAlpha folder, and run the following:\n\n\nTo run:\n\n\ncomposer/git-update BRANCH PORT\n\n\nParameters:\n\n1. BRANCH - github branch to use (master, etc)\n\n2. PORT - port to run on (8888, 5555, 3333, etc)",
            "title": "Auto update script"
        },
        {
            "location": "/python/",
            "text": "Instantiate Krow\n\n\nCURRENTLY, PYTHON CODE CAN ONLY BE WRITTEN AND RAN IN THE PYTHON FOLDER\n\nTo instantiate a Chain object, use the following commands:\n\n\nfrom Krow import *\n\nchain = Chain(\"http://18.220.46.51:3000/\")\n\n\n\n\nRun the tests\n\n\nRunning the tests is super easy. \n\n\nfrom Krow import *\nimport test_suite\nimport time\n\nchain = Chain(\"http://18.220.46.51:3000/\")\n# test_suite.delete_samples(chain) # if you need to delete the samples\n# test_suite.create_samples(chain) # only use if you just deleted the samples\nx = test_suite.test_all(chain) # Runs all tests\nfor i in x:\n    print (i)\n# print (test_suite.test_1(chain, \"results/test_1/\", write=False)) # run individual tests. Leave write=False\n# print (test_suite.test_2(chain, \"results/test_2/\", write=True))\n# print (test_suite.test_3(chain, \"results/test_3/\", write=True))\n# print (test_suite.test_4(chain, \"results/test_4/\", write=True))\n# print (test_suite.test_5(chain, \"results/test_5/\", write=True))\n# print (test_suite.test_6(chain, \"results/test_6/\", write=True))\n# print (test_suite.test_7(chain, \"results/test_7/\", write=True))\n# print (test_suite.test_8(chain, \"results/test_8/\", write=False))\n# print (test_suite.test_9(chain, \"results/test_9/\", write=False))\n# print (test_suite.test_10(chain, \"results/test_10/\", write=False))\n# print (test_suite.test_11(chain, \"results/test_11/\", write=False))\n# print (test_suite.test_12(chain, \"results/test_12/\", write=False))\n# print (test_suite.test_13(chain, \"results/test_13/\", write=False))\n\ntime.sleep(5) # optional\n\nfor i in test_suite.get_transaction_history(chain)[-10:]: # optional. Prints last 10 entries from the chain\n    print (i)",
            "title": "Python"
        },
        {
            "location": "/python/#instantiate-krow",
            "text": "CURRENTLY, PYTHON CODE CAN ONLY BE WRITTEN AND RAN IN THE PYTHON FOLDER \nTo instantiate a Chain object, use the following commands:  from Krow import *\n\nchain = Chain(\"http://18.220.46.51:3000/\")",
            "title": "Instantiate Krow"
        },
        {
            "location": "/python/#run-the-tests",
            "text": "Running the tests is super easy.   from Krow import *\nimport test_suite\nimport time\n\nchain = Chain(\"http://18.220.46.51:3000/\")\n# test_suite.delete_samples(chain) # if you need to delete the samples\n# test_suite.create_samples(chain) # only use if you just deleted the samples\nx = test_suite.test_all(chain) # Runs all tests\nfor i in x:\n    print (i)\n# print (test_suite.test_1(chain, \"results/test_1/\", write=False)) # run individual tests. Leave write=False\n# print (test_suite.test_2(chain, \"results/test_2/\", write=True))\n# print (test_suite.test_3(chain, \"results/test_3/\", write=True))\n# print (test_suite.test_4(chain, \"results/test_4/\", write=True))\n# print (test_suite.test_5(chain, \"results/test_5/\", write=True))\n# print (test_suite.test_6(chain, \"results/test_6/\", write=True))\n# print (test_suite.test_7(chain, \"results/test_7/\", write=True))\n# print (test_suite.test_8(chain, \"results/test_8/\", write=False))\n# print (test_suite.test_9(chain, \"results/test_9/\", write=False))\n# print (test_suite.test_10(chain, \"results/test_10/\", write=False))\n# print (test_suite.test_11(chain, \"results/test_11/\", write=False))\n# print (test_suite.test_12(chain, \"results/test_12/\", write=False))\n# print (test_suite.test_13(chain, \"results/test_13/\", write=False))\n\ntime.sleep(5) # optional\n\nfor i in test_suite.get_transaction_history(chain)[-10:]: # optional. Prints last 10 entries from the chain\n    print (i)",
            "title": "Run the tests"
        }
    ]
}